package com.jamesmorrisstudios.googleplaylibrary.googlePlay;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.support.annotation.NonNull;

import com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatch;
import com.jamesmorrisstudios.appbaselibrary.listAdapters.BaseRecycleItem;
import com.jamesmorrisstudios.googleplaylibrary.game.GameDetails;
import com.jamesmorrisstudios.appbaselibrary.BitManager;

import java.util.ArrayList;

/**
 * Created by James on 7/29/2015.
 */
public class OnlineSaveItem extends BaseRecycleItem {
    public final static byte CURRENT_VERSION = 1;

    public final boolean dataValid;

    //These are encoded in part of the byte[] of data from the save
    public final Bitmap image;
    //These are encoded in the description text
    public final GameDetails.NumberPlayers numberPlayers;
    public final GameDetails.NumberTeams numberTeams;
    public final GameDetails.MatchVariant matchVariant;
    public final ArrayList<GameDetails.MatchAddon> matchAddons;
    public final String[] playerNames;

    //Included in the actual online save
    public final byte[] data; //The image and description have already been removed
    public final TurnBasedMatch match;
    public final GooglePlay.SaveType saveType;

    //Testing only
    public OnlineSaveItem(boolean canRematch) {
        this.data = null;
        this.image = null;
        this.match = null;
        this.playerNames = new String[] {"Player 1", "Player 2", "Player 3", "Player 4", "Player 5", "Player 6"};
        this.numberPlayers = GameDetails.NumberPlayers.FOUR;
        this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
        this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
        this.matchAddons = new ArrayList<>();
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_1);
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_2);
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_3);
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_4);
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_5);
        this.matchAddons.add(GameDetails.MatchAddon.ADDON_6);

        //Not used data for saving as the data is auto generated by the online match system
        this.saveType = GooglePlay.SaveType.YOUR_TURN;

        dataValid = true;
    }

    //Created to pass to the save game
    public OnlineSaveItem(@NonNull byte[] data, @NonNull Bitmap image, @NonNull TurnBasedMatch match, @NonNull String[] playerNames,
                          GameDetails.NumberPlayers numberPlayers, GameDetails.NumberTeams numberTeams, GameDetails.MatchVariant matchVariant, ArrayList<GameDetails.MatchAddon> matchAddons) {
        this.data = data;
        this.image = image;
        this.match = match;
        this.playerNames = playerNames;
        this.numberPlayers = numberPlayers;
        this.numberTeams = numberTeams;
        this.matchVariant = matchVariant;
        this.matchAddons = matchAddons;

        //Not used data for saving as the data is auto generated by the online match system
        this.saveType = GooglePlay.SaveType.YOUR_TURN;

        dataValid = true;
    }

    //Created by loading a game to pass to the save browser
    public OnlineSaveItem(@NonNull byte[] srcData, @NonNull TurnBasedMatch match, @NonNull GooglePlay.SaveType saveType, long lastUpdateTimestamp) {
        this.match = match;
        this.saveType = saveType;

        //Must decode srcData
        if(srcData.length <= 13) {
            this.data = null;
            this.image = null;
            this.playerNames = null;
            this.numberPlayers = GameDetails.NumberPlayers.TWO;
            this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
            this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
            this.matchAddons = new ArrayList<>();
            dataValid = false;
            return;
        }
        int index = 0;
        byte version = BitManager.copyFromByteArr(index, srcData);
        if(version != CURRENT_VERSION) {
            this.data = null;
            this.image = null;
            this.playerNames = null;
            this.numberPlayers = GameDetails.NumberPlayers.TWO;
            this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
            this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
            this.matchAddons = new ArrayList<>();
            dataValid = false;
            return;
        }
        index += 1;
        int lengthImage = BitManager.byteArrToInt(srcData, index);
        index += 4;
        int lengthDesc = BitManager.byteArrToInt(srcData, index);
        index += 4;
        int lengthData = BitManager.byteArrToInt(srcData, index);
        index += 4;
        byte[] imageArr = BitManager.copyFromByteArr(index, lengthImage, srcData);
        index += lengthImage;
        byte[] descArr = BitManager.copyFromByteArr(index, lengthDesc, srcData);
        index += lengthDesc;
        this.data = BitManager.copyFromByteArr(index, lengthData, srcData);

        //Got the byte data now decode
        this.image = BitmapFactory.decodeByteArray(imageArr, 0, imageArr.length);

        playerNames = new String[6];

        String desc = new String(descArr);
        String lines[] = desc.split("\\r?\\n");

        if(lines.length == 10) {
            playerNames[0] = lines[0];
            playerNames[1] = lines[1];
            playerNames[2] = lines[2];
            playerNames[3] = lines[3];
            playerNames[4] = lines[4];
            playerNames[5] = lines[5];

            switch(lines[6].length()) {
                case 1:
                    this.numberPlayers = GameDetails.NumberPlayers.ONE;
                    break;
                case 2:
                    this.numberPlayers = GameDetails.NumberPlayers.TWO;
                    break;
                case 3:
                    this.numberPlayers = GameDetails.NumberPlayers.THREE;
                    break;
                case 4:
                    this.numberPlayers = GameDetails.NumberPlayers.FOUR;
                    break;
                case 5:
                    this.numberPlayers = GameDetails.NumberPlayers.FIVE;
                    break;
                case 6:
                    this.numberPlayers = GameDetails.NumberPlayers.SIX;
                    break;
                default:
                    this.numberPlayers = GameDetails.NumberPlayers.ONE;
            }

            switch(lines[7].length()) {
                case 1:
                    this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
                    break;
                case 2:
                    this.numberTeams = GameDetails.NumberTeams.TWO;
                    break;
                default:
                    this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
            }

            switch(lines[8].length()) {
                case 1:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
                    break;
                case 2:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_2;
                    break;
                case 3:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_3;
                    break;
                case 4:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_4;
                    break;
                case 5:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_5;
                    break;
                case 6:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_6;
                    break;
                default:
                    this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
            }

            this.matchAddons = new ArrayList<>();
            if(lines[9].charAt(0) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_1);
            }
            if(lines[9].charAt(1) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_2);
            }
            if(lines[9].charAt(2) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_3);
            }
            if(lines[9].charAt(3) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_4);
            }
            if(lines[9].charAt(4) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_5);
            }
            if(lines[9].charAt(5) == ' ') {
                this.matchAddons.add(GameDetails.MatchAddon.ADDON_6);
            }

            //0: Player 1
            //1: Player 2
            //2: Player 3
            //3: Player 4
            //4: Player 5
            //5: Player 6
            //6: number of players (number of spaces to indicate how many players)
            //7: number of teams (number of spaces to indicate item)
            //8: variant (number of spaces to indicate which variant)
            //9: list of values indicating addons (Space for enabled, Tab for disabled for all 6 addons)

            dataValid = true;
        } else {
            this.numberPlayers = GameDetails.NumberPlayers.TWO;
            this.numberTeams = GameDetails.NumberTeams.FREE_FOR_ALL;
            this.matchVariant = GameDetails.MatchVariant.VARIANT_1;
            this.matchAddons = new ArrayList<>();
            dataValid = false;
        }
    }

    public final byte[] getEncodedData() {
        //Enocde the data from the description and image and actual game save data





        return data; //TODO
    }

    public final boolean canRematch() {
        if(match == null) {
            return false;
        }
        return match.canRematch();
    }

    public final long getLastUpdateTimeStamp() {
        if(match == null) {
            return 0;
        }
        return match.getLastUpdatedTimestamp();
    }


    //BitmapFactory.decodeByteArray()
    //InputStream inputStream = AppUtil.getContext().openFileInput(fileName);
    //bitmap = BitmapFactory.decodeStream(inputStream);
    //inputStream.close();

    //ByteArrayOutputStream stream = new ByteArrayOutputStream();
    //bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
    //byte[] byteArray = stream.toByteArray();

}
